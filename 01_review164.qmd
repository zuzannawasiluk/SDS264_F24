---
title: 'Review of Data Science 1'
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---
### trying
You can download this .qmd file from [here](https://github.com/proback/264_fall_2024/blob/main/01_review164.qmd).  Just hit the Download Raw File button.


### Determinants of COVID vaccination rates

```{r}
#| include: false

library(tidyverse)
vaccine_data <- read_csv("https://proback.github.io/264_fall_2024/Data/vaccinations_2021.csv")
```

First, a little detour to describe several alternatives for reading in data:

If you navigate to [my Github account](https://github.com/proback), and find the `264_fall_2024` repo, there is a Data folder inside.  You can then click on `vacc_Mar21.csv` to see the data we want to download.   [This link](https://github.com/proback/264_fall_2024/blob/main/Data/vacc_Mar21.csv) should also get you there, but it's good to be able to navigate there yourself.

```{r}
#| eval: false

# Approach 1
vaccine_data <- read_csv("vacc_Mar21 (1).csv")  #<1>

# Approach 2
vaccine_data <- read_csv("~/264_fall_2024/Data/vaccinations_2021.csv")  #<2>

# Approach 3
vaccine_data <- read_csv("https://proback.github.io/264_fall_2024/Data/vaccinations_2021.csv")  #<3>

# Approach 4
vaccine_1_data <- read_csv("https://raw.githubusercontent.com/proback/264_fall_2024/main/Data/vaccinations_2021.csv")  #<4>

```

1. Approach 1: create a Data folder in the same location where this .qmd file resides, and then store vaccinations_2021.csv in that Data folder
2. Approach 2: give R the complete path to the location of vaccinations_2021.csv, starting with Home (~)
3. Approach 3: link to our course webpage, and then know we have a Data folder containing all our csvs
4. Approach 4: navigate to the data in GitHub, hit the Raw button, and copy that link


A recent Stat 272 project examined determinants of covid vaccination rates at the county level.  Our data set contains 3053 rows (1 for each county in the US) and 14 columns; here is a quick description of the variables we'll be using:

- `state` = state the county is located in
- `county` = name of the county
- `region` = region the state is located in
- `metro_status` = Is the county considered "Metro" or "Non-metro"?
- `rural_urban_code` = from 1 (most urban) to 9 (most rural)
- `perc_complete_vac` = percent of county completely vaccinated as of 11/9/21
- `tot_pop` = total population in the county
- `votes_Trump` = number of votes for Trump in the county in 2020
- `votes_Biden` = number of votes for Biden in the county in 2020
- `perc_Biden` = percent of votes for Biden in the county in 2020
- `ed_somecol_perc` = percent with some education beyond high school (but not a Bachelor's degree)
- `ed_bachormore_perc` = percent with a Bachelor's degree or more
- `unemployment_rate_2020` = county unemployment rate in 2020
- `median_HHincome_2019` = county's median household income in 2019


1. Consider only Minnesota and its surrounding states (Iowa, Wisconsin, North Dakota, and South Dakota).  We want to examine the relationship between the percentage who voted for Biden and the percentage of complete vaccinations by state.  Generate two plots to examine this relationship:

```{r}
vaccine_data |> 
  filter(state == "Minnesota" | state == "Iowa" | state == "Wisconsin" | state == "North Dakota" | state == "South Dakota") |>
  ggplot(aes(x = perc_Biden, y = perc_complete_vac, color = fct_reorder2(state, perc_Biden, perc_complete_vac))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(x = "Percent votes for Biden",
      y = "Percent Vaccinated",
      color = "State")
```

a) A scatterplot with points and smoothers colored by state.  Make sure the legend is ordered in a meaningful way, and include good labels on your axes and your legend.  Also leave off the error bars from your smoothers.

b) One plot per state containing a scatterplot and a smoother.

```{r}
vaccine_data |> 
  filter(state == "Minnesota" | state == "Iowa" | state == "Wisconsin" | state == "North Dakota" | state == "South Dakota") |>
  ggplot(aes(x = perc_Biden, y = perc_complete_vac, color = fct_reorder2(state, perc_Biden, perc_complete_vac))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(x = "Percent votes for Biden",
       y = "Percent Vaccinated",
       color = "State") +
  facet_grid( ~ state) +
  theme(legend.position = "none")
```

Describe which plot you prefer and why.  What can you learn from your preferred plot?

I prefer the second plot because it is easier to see the data on a state-level even if the values on the x and y axis are less clear. From this plot, I learned that Iowa, Minnesota, and Wisconsin have a vaccination percentage that is above 50% but the percentage of votes for Biden is clustered in the 25-50%. North Dakota and South Dakota have points scattered all over for both percent vaccinated and those that voted for Biden, therefore, it is very difficult to come up with an intuitive interpretation for these states. Overall, when the graphs are broken down by state, the data is too varied to have a meaningful connection in this relationship.

4. Produce 3 different plots for illustrating the relationship between the rural_urban_code and percent vaccinated.  Hint: you can sometimes turn numeric variables into categorical variables for plotting purposes (e.g. `as.factor()`, `ifelse()`).

```{r}
vaccine_data |> 
  filter(state == "Minnesota" | state == "Iowa" | state == "Wisconsin" | state == "North Dakota" | state == "South Dakota") |>
  mutate(rural_urban_code = as.factor(rural_urban_code))|>
  ggplot(aes(x = rural_urban_code, y = perc_complete_vac, fill = rural_urban_code)) +
  geom_boxplot() +
  labs(x = "Rural Urban Code",
  y = "Percent Completely Vaccinated",
  title = "Box plot of the relationship between urban code and percent vaccinated") +
  theme(legend.position = "none")

vaccine_data |> 
  filter(state == "Minnesota" | state == "Iowa" | state == "Wisconsin" | state == "North Dakota" | state == "South Dakota") |>
  mutate(rural_urban_code = as.factor(rural_urban_code))|>
  ggplot(aes(x = rural_urban_code, y = perc_complete_vac, fill = rural_urban_code)) +
  geom_violin() +
  geom_boxplot(width = 0.2, alpha = 0.2) +
  labs(x = "Rural Urban Code",
  y = "Percent Completely Vaccinated",
  title = "Violin box plot for the relationship between urban code and percent vaccinated") +
  theme(legend.position = "none")
```

```{r}
vaccine_data |> 
  filter(state == "Minnesota" | state == "Iowa" | state == "Wisconsin" | state == "North Dakota" | state == "South Dakota") |>
  mutate(rural_urban_code = as.factor(rural_urban_code)) %>% 
  ggplot(aes(y = perc_complete_vac, fill = rural_urban_code)) +
  geom_histogram(bins = 30) +
  labs(x = "Count",
       y = "Percent vaccinated",
       title = "Histogram for the relationship between vaccination and urban code")
```

State your favorite plot, why you like it better than the other two, and what you can learn from your favorite plot.  Create an alt text description of your favorite plot, using the Four Ingredient Model.  See [this link](https://drive.google.com/file/d/1BuEbL6vETBcFULmtlrwwZBUYhdEg0Zqb/view?usp=sharing) for reminders and references about alt text.

My preferred plot is the violin boxplot (#2) because I appreciate the layers included in this representation(violin and boxplot layer). Best of both worlds in one. However, this visualization is only slightly better than the others but not by much. The boxplot provides information on spread and variability with the IQR and the outliers but even this information is less conducive to making a conclusion. Rural codes 5 and 6 have the smallest IQRs but there inot much to be gathered from that. Additionally, the violin layer displays the density of the data. It is better than the histogram and the solo boxplot but it still does not unearth any important findings.

5. BEFORE running the code below, sketch the plot that will be produced by R.  AFTER running the code, describe what conclusion(s) can we draw from this plot?  

```{r}
#| eval: FALSE

vaccine_data |>
  filter(!is.na(perc_Biden)) |>
  mutate(big_states = fct_lump(state, n = 10)) |>
  group_by(big_states) |>
  summarize(IQR_Biden = IQR(perc_Biden)) |>
  mutate(big_states = fct_reorder(big_states, IQR_Biden)) |>
  ggplot() + 
    geom_point(aes(x = IQR_Biden, y = big_states))
```

This plot has large states on the y-axis and the interquartile range for the percentage of votes that went to Biden on the x-axis. Given that the IQR is the difference between the upper and lower quartile, "middle 50%," the IQR represents the closeness of the data to the median. The larger the IQR value, the more "spread" there is in the data from that median value. For example, Tennessee has the lowest IQR and therefore, there is less variability with the percent of voters that voted for Biden than in other states. Virginia has a high(er) IQR which could potentially indicate that there is more variability. States in the middle (ex. North Carolina, Texas) have an IQR value that suggests they are more of a swing state than Tennessee or Missouri. 

6. In this question we will focus only on the 12 states in the Midwest (i.e. where region == "Midwest").

a) Create a tibble with the following information for each state.  Order states from least to greatest state population.

- number of different `rural_urban_code`s represented among the state's counties (there are 9 possible)
- total state population
- proportion of Metro counties
- median unemployment rate 

```{r}
state_information <- vaccine_data %>% 
  filter(region == "Midwest") %>% 
  select(state, tot_pop, metro_status, unemployment_rate_2020, rural_urban_code) %>% 
  group_by(state) %>% 
  summarize(num_different_codes = n_distinct(rural_urban_code),
            total_state_pop = sum(tot_pop),
            median_unemployment_rate = median(unemployment_rate_2020),
            prop_metro = mean(ifelse(metro_status == "Metro", 1, 0))) %>% 
  arrange(desc(total_state_pop)) 
```

b) Use your tibble in (a) to produce a plot of the relationship between proportion of Metro counties and median unemployment rate.  Points should be colored by the number of different `rural_urban_code`s in a state, but a single linear trend should be fit to all points.  What can you conclude from the plot?

```{r}
state_information |>
  ggplot(aes(x = prop_metro, y = median_unemployment_rate, color = num_different_codes)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  labs(x = "Proportion of Metro counties",
       y = "Median Unemployment Rate",
       title = "The relationship between metro counties and median unemployment rate",
       color = "Rural Codes")
```

8. Hypothetical R chunk #1:

```{r}
#| eval: false

# Hypothetical R chunk 1
temp <- vaccine_1_data |>
  mutate(new_perc_vac = ifelse(perc_complete_vac > 95, NA, perc_complete_vac),
         MD_group = cut_number(people_per_MD, 3)) |>
  group_by(MD_group) |>
  summarise(n = n(),
            mean_perc_vac = mean(new_perc_vac, na.rm = TRUE),
            mean_white = mean(perc_white, na.rm = TRUE))

```  

a) Describe the tibble `temp` created above.  What would be the dimensions?  What do rows and columns represent?

There will be four columns: MD_group, mean_perc_vac, n, and mean_white. And three rows because group_by(MD_group) is grouping the previous groups (3) created by cut_number.

b) What would happen if we replaced `new_perc_vac = ifelse(perc_complete_vac > 95, NA, perc_complete_vac)` with `new_perc_vac = ifelse(perc_complete_vac > 95, perc_complete_vac, NA)`?

In the original code, a value was replaced with NA if perc_complete_vac was greater than 95. In the new example, a value would be replaced with NA if perc_complete_vac is less than 95. 

c) What would happen if we replaced `mean_white = mean(perc_white, na.rm = TRUE)` with `mean_white = mean(perc_white)`?

When you remove na.rm = TRUE, R will no longer ignore NA values when making calculations. 

d) What would happen if we removed `group_by(MD_group)`?

Without the group_by you are taking a summary of the entire dataset. 

9. Hypothetical R chunk #2:

```{r}
#| eval: false

# Hypothetical R chunk 2
ggplot(data = vaccine_data) +
  geom_point(mapping = aes(x = perc_over_65, y = perc_complete_vac, 
                           color = HR_party)) +
  geom_smooth()

temp <- vaccine_data |>
  group_by(HR_party) |>
  summarise(var1 = n()) |>
  arrange(desc(var1)) |>
  slice_head(n = 3)

vaccine_data |>
  ggplot(mapping = aes(x = fct_reorder(HR_party, perc_over_65, .fun = median), 
                       y = perc_over_65)) +
    geom_boxplot()
```

a) Why would the first plot produce an error?

The first plot would produce an error because mapping is stored locally instead of globally so geom_smooth would have no information to create a line unless the information was moved to ggplot. 

b) Describe the tibble `temp` created above.  What would be the dimensions?  What do rows and columns represent?

3 rows by 2 columns. The columns will be HR_party and var1 and there are three rows because of the n = 3 in slice_head which takes the first three rows of the original data.

c) What would happen if we replaced `fct_reorder(HR_party, perc_over_65, .fun = median)` with `HR_party`?

You would have a boxplot with the values of HR_party on the x-axis and perc_over_65 on the y-axis. Before this change, perc_over_65 was ordered by the median and as a result, so was HR_party. 

10. Hypothetical R chunk #3:

```{r}
#| eval: false

# Hypothetical R chunk 3
vaccine_data |>
  filter(!is.na(people_per_MD)) |>
  mutate(state_lump = fct_lump(state, n = 4)) |>
  group_by(state_lump, rural_urban_code) |>
  summarise(mean_people_per_MD = mean(people_per_MD)) |>
  ggplot(mapping = aes(x = rural_urban_code, y = mean_people_per_MD, 
      colour = fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD))) +
    geom_line()
```

a) Describe the tibble piped into the ggplot above.  What would be the dimensions?  What do rows and columns represent?

The rows are determined by the number of unique combinations of rural urban code and state so it is difficult to predict at this time how many rows there will be. As for columns, there will be three columns: people_per_MD, state_lump, and rural_urban_code. 

b) Carefully describe the plot created above.

The rural urban code (1-9) is on the x-axis and the mean people per MD is on the y-axis for the line and the number of lines is determined by the unique combinations that exist of state_lump and rural_urban_code. The legend is expressed through the variable mean_people_per_MD. 

c) What would happen if we removed `filter(!is.na(people_per_MD))`?

If we removed the line above, we would keep rows with NA for people_per_MD.

d) What would happen if we replaced `fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD)` with `state_lump`?

If we replaced the original line with state_lump, the color and number of lines are expressed through however many unique values there are for state_lump.
